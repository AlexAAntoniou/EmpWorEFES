<?xml version="1.0" encoding="utf-8"?>
<xsl:stylesheet version="2.0"
                xmlns:kiln="http://www.kcl.ac.uk/artshums/depts/ddh/kiln/ns/1.0"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

  <!-- This XSLT adds the Solr query parameters passed in the
       query-string parameter to an XML query document (root element
       "query"). The document is only added to, with the new elements
       added after the existing ones.

       The query element may have a q_fields attribute that contains a
       whitespace delimited list of field names that are to be treated
       as values in the q field, of the form "<field name>:<field
       value>".

       The query element may have a range_fields attribute that
       contains a whitespace delimited list of field names that are to
       be treated as providing a range. These field names are not
       those of the actual query parameters; rather, the range start
       parameter is the field name followed by "_start", and the range
       end parameter is the field name followed by "_end".

       An element in the XML query document may have a type attribute
       with value "default" to indicate that it should be used if and
       only if there are no parameters with the same name, that are
       not empty, in the query-string.

  -->

  <xsl:import href="utils.xsl" />

  <xsl:param name="query-string" />

  <xsl:template match="query">
    <xsl:variable name="q_fields" select="tokenize(@q_fields, '\s+')" />
    <xsl:variable name="range_fields" select="tokenize(@range_fields, '\s+')" />
    <xsl:variable name="range_start_fields">
      <xsl:for-each select="$range_fields">
        <xsl:sequence select="concat(., '_start')" />
      </xsl:for-each>
    </xsl:variable>
    <xsl:variable name="range_end_fields">
      <xsl:for-each select="$range_fields">
        <xsl:sequence select="concat(., '_end')" />
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy>
      <xsl:apply-templates select="@*" />
      <xsl:variable name="processed-query-string">
        <xsl:for-each select="tokenize($query-string, '&amp;')">
          <!-- Through madness or autogenerated query strings, there
               may be empty or malformed components (such as the query
               string starting with an &amp; -->
          <xsl:if test="contains(., '=')">
            <xsl:call-template name="handle-querystring-parameter">
              <xsl:with-param name="key" select="substring-before(., '=')" />
              <xsl:with-param name="value" select="substring-after(., '=')" />
              <xsl:with-param name="q_fields" select="$q_fields" />
              <xsl:with-param name="range_start_fields"
                              select="$range_start_fields" />
              <xsl:with-param name="range_end_fields"
                              select="$range_end_fields" />
            </xsl:call-template>
          </xsl:if>
        </xsl:for-each>
      </xsl:variable>
      <xsl:apply-templates select="node()">
        <xsl:with-param name="query-string" select="$processed-query-string" />
        <xsl:with-param name="q_fields" select="$q_fields" />
      </xsl:apply-templates>
      <xsl:copy-of select="$processed-query-string" />
    </xsl:copy>
  </xsl:template>

  <xsl:template match="query/*">
    <xsl:param name="query-string" />
    <xsl:param name="q_fields" />
    <xsl:variable name="field_name" select="local-name()" />
    <xsl:choose>
      <!-- If this is a default value, then do not include it if there
           is a query-string parameter with the same name, provided
           that query-string parameter has content. -->
      <xsl:when test="@type='default' and $query-string/*[local-name()=$field_name][normalize-space()]" />
      <xsl:when test="$field_name = $q_fields">
        <q>
          <xsl:value-of select="$field_name" />
          <xsl:text>:</xsl:text>
          <xsl:apply-templates select="node()" />
        </q>
      </xsl:when>
      <xsl:otherwise>
        <xsl:copy>
          <xsl:apply-templates select="@*|node()" />
        </xsl:copy>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template match="query/@q_fields" />

  <xsl:template match="query/@range_fields" />

  <xsl:template match="q/@type[. = 'default']" />

  <xsl:template match="text()">
    <xsl:call-template name="kiln:escape-value">
      <xsl:with-param name="value" select="." />
      <xsl:with-param name="url-escaped" select="0" />
    </xsl:call-template>
  </xsl:template>

  <xsl:template match="@*|*">
    <xsl:copy>
      <xsl:apply-templates select="@*|node()" />
    </xsl:copy>
  </xsl:template>

  <xsl:template name="handle-querystring-parameter">
    <xsl:param name="key" />
    <xsl:param name="value" />
    <xsl:param name="q_fields" />
    <xsl:param name="range_start_fields" />
    <xsl:param name="range_end_fields" />
    <xsl:if test="normalize-space($value)">
      <xsl:choose>
        <xsl:when test="$key = $q_fields">
          <xsl:element name="q">
            <xsl:value-of select="$key" />
            <xsl:text>:</xsl:text>
            <xsl:call-template name="kiln:escape-value">
              <xsl:with-param name="value" select="$value" />
              <xsl:with-param name="url-escaped" select="1" />
            </xsl:call-template>
          </xsl:element>
        </xsl:when>
        <xsl:when test="$key = $range_start_fields">
          <xsl:element name="{replace($key, '_start$', '')}">
            <xsl:attribute name="type" select="'range_start'" />
            <xsl:call-template name="kiln:escape-value">
              <xsl:with-param name="value" select="$value" />
              <xsl:with-param name="url-escaped" select="1" />
            </xsl:call-template>
          </xsl:element>
        </xsl:when>
        <xsl:when test="$key = $range_end_fields">
          <xsl:element name="{replace($key, '_end$', '')}">
            <xsl:attribute name="type" select="'range_end'" />
            <xsl:call-template name="kiln:escape-value">
              <xsl:with-param name="value" select="$value" />
              <xsl:with-param name="url-escaped" select="1" />
            </xsl:call-template>
          </xsl:element>
        </xsl:when>
        <xsl:otherwise>
          <xsl:element name="{$key}">
            <xsl:call-template name="kiln:escape-value">
              <xsl:with-param name="value" select="$value" />
              <xsl:with-param name="url-escaped" select="1" />
            </xsl:call-template>
          </xsl:element>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:if>
  </xsl:template>

</xsl:stylesheet>
